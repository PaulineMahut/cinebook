datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                     Int                     @id @default(autoincrement())
  email                  String                  @unique
  password               String
  pseudo                 String?
  profilePicture String?
  role                   Role                    @default(USER)
  userMovies             UserMovie[]
  friends                Friendship[]            @relation("UserFriends")
  friendOf               Friendship[]            @relation("FriendsOfUser")

  receivedNotifications  Notification[]          @relation("UserNotifications")
  sentNotifications      Notification[]          @relation("SenderNotifications")

  groupsCreated          Group[]                 @relation("GroupCreator")
  memberships            GroupMembership[]       @relation("UserMembership")
  movieLists             MovieList[]             @relation("UserMovieLists")
  votes                  Vote[]
  comments               Comment[]               @relation("UserComments")

}

model Movie {
  id          Int        @id @default(autoincrement())
  title       String
  overview    String
  voteAverage Float
  tmdbId      Int        @unique
  userMovies  UserMovie[]
  genres      Genre[]    @relation("MovieGenres")
}

model UserMovie {
  id        Int   @id @default(autoincrement())
  userId    Int
  movieId   Int
  user      User  @relation(fields: [userId], references: [id])
  movie     Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
}

model Genre {
  id        Int      @id @default(autoincrement())
  name      String
  movies    Movie[]  @relation("MovieGenres")
}

model Friendship {
  id          Int   @id @default(autoincrement())
  userId      Int
  friendId    Int
  user        User  @relation("UserFriends", fields: [userId], references: [id])
  friend      User  @relation("FriendsOfUser", fields: [friendId], references: [id])
}

model Notification {
  id              Int      @id @default(autoincrement())
  userId          Int
  senderId        Int
  groupId         Int?
  listId          Int?
  votingSessionId Int?     // Ajoutez ce champ
  message         String?
  type            String
  status          String   @default("pending")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation("UserNotifications", fields: [userId], references: [id])
  sender          User     @relation("SenderNotifications", fields: [senderId], references: [id])
  group           Group?   @relation("GroupNotifications", fields: [groupId], references: [id])
  list            MovieList? @relation("MovieListNotifications", fields: [listId], references: [id])
  votingSession   VotingSession? @relation(fields: [votingSessionId], references: [id])
}

model Group {
  id            Int               @id @default(autoincrement())
  name          String
  description   String
  coverPhoto    String?
  creatorId     Int
  creator       User              @relation("GroupCreator", fields: [creatorId], references: [id])
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  members       GroupMembership[] @relation("GroupMembers")
  notifications Notification[]    @relation("GroupNotifications")
  sharedLists   SharedList[]      @relation("GroupSharedLists")
}

model GroupMembership {
  id        Int  @id @default(autoincrement())
  userId    Int
  groupId   Int
  user      User  @relation("UserMembership", fields: [userId], references: [id])
  group     Group @relation("GroupMembers", fields: [groupId], references: [id])
}

model MovieList {
  id          Int             @id @default(autoincrement())
  name        String
  description String
  userId      Int
  user        User            @relation("UserMovieLists", fields: [userId], references: [id])
  items       MovieListItem[]
  sharedLists SharedList[]
  votingSessions VotingSession[]
  notifications Notification[] @relation("MovieListNotifications")
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model MovieListItem {
  id          Int      @id @default(autoincrement())
  listId      Int
  list        MovieList @relation(fields: [listId], references: [id])
  title       String
  overview    String
  voteAverage Float
  tmdbId      Int
  votes       Vote[]
}

model SharedList {
  id        Int       @id @default(autoincrement())
  listId    Int
  groupId   Int
  list      MovieList @relation(fields: [listId], references: [id])
  group     Group     @relation("GroupSharedLists", fields: [groupId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model VotingSession {
  id          Int             @id @default(autoincrement())
  movieListId Int
  description String
  endTime     DateTime
  movieList   MovieList       @relation(fields: [movieListId], references: [id])
  votes       Vote[]
  notifications Notification[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Vote {
  id              Int             @id @default(autoincrement())
  userId          Int
  votingSessionId Int
  movieListItemId Int
  user            User            @relation(fields: [userId], references: [id])
  votingSession   VotingSession   @relation(fields: [votingSessionId], references: [id])
  movieListItem   MovieListItem   @relation(fields: [movieListItemId], references: [id])
  createdAt       DateTime        @default(now())
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String
  rating      Float
  createdAt   DateTime @default(now())
  userId      Int
  tmdbId      Int
  user        User     @relation("UserComments", fields: [userId], references: [id])
}

enum Role {
  ADMIN
  USER
}